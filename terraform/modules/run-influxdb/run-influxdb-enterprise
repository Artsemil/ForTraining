#!/usr/bin/env bash
# This script configures and starts a pre-installed InfluxDB Enterprise server. The script assumes you have installed
# the enterprise binaries with the ´install-influxdb´ -module. Depending on input parameters, the script will either
# enable the meta or the data service. You can pass in values to be filled in the InfluxDB configuration file
#
# For InfluxDB enterprise, we need to determine the rally point for the cluster, where all the nodes register.
# This is done querying the GCP API with `gcloud` command for the alphabetically first instance id in the managed
# instance group.

set -e

# Import the appropriate bash commons libraries
readonly BASH_COMMONS_DIR="/opt/gruntwork/bash-commons"
readonly INFLUXDB_COMMONS_DIR="/opt/influxdb-commons"
readonly DEFAULT_META_CONFIG_FILE_PATH="/etc/influxdb/influxdb-meta.conf"
readonly DEFAULT_DATA_CONFIG_FILE_PATH="/etc/influxdb/influxdb.conf"
readonly DEFAULT_OSS_CONFIG_FILE_PATH="/etc/influxdb/influxdb.conf"
readonly MAX_RETRIES=60
readonly SLEEP_BETWEEN_RETRIES_SEC=5

if [[ ! -d "$BASH_COMMONS_DIR" ]]; then
  echo "ERROR: this script requires that bash-commons is installed in $BASH_COMMONS_DIR. See https://github.com/gruntwork-io/bash-commons for more info."
  exit 1
fi

if [[ ! -d "$INFLUXDB_COMMONS_DIR" ]]; then
  echo "ERROR: this script requires that influxdb-commons is installed in $INFLUXDB_COMMONS_DIR."
  exit 1
fi

source "$BASH_COMMONS_DIR/assert.sh"
source "$BASH_COMMONS_DIR/file.sh"
source "$BASH_COMMONS_DIR/log.sh"

source "$INFLUXDB_COMMONS_DIR/influxdb-common.sh"

function print_usage {
  echo
  echo "Usage: run-influxdb-enterprise [options]"
  echo
  echo "This script can be used to configure and initialize InfluxDB. This script has been tested with Ubuntu 18.04."
  echo
  echo "Options:"
  echo
  echo -e "  --node-type\t\tSpecifies whether the instance will be a Meta or Data node. Must be one of 'meta' or 'data'."
  echo -e "  --meta-group-name\tThe name of the Instance Group that contains meta nodes."
  echo -e "  --hostname\t\tFully qualified hostname of the instance."
  echo -e "  --private-ip\t\tPrivate IPv4 address of the instance."
  echo -e "  --region\t\tThe GCP region the Instance Groups are deployed in."

  echo -e "  --auto-fill\t\tSearch the InfluxDB config file for KEY and replace it with VALUE. May be repeated."

  echo
  echo "Example:"
  echo
  echo "  run-influxdb-enterprise  --node-type meta --meta-group-name group-meta --data-group-name group-data --region europe-north1 --auto-fill '<__LICENSE_KEY__>=******'"
}

function get_rally_point_ip {
  local -r meta_group_name="$1"
  local -r region="$2"

  log_info "Looking up rally point for Instance Group $meta_group_name in $region"

  local rally_point_ip

  rally_point_ip=$(gcp_first_instance_ip_in_managed_instance_group "$meta_group_name" "$region")

  echo -n "$rally_point_ip"
}

function join_cluster {
  local -r node_type="$1"
  local -r node_hostname="$2"
  local -r node_ip="$3"
  local -r rally_point_ip="$4"

  set +e

  if [[ "$node_ip" == "$rally_point_ip" ]]; then

    log_info "This server is the rally point for the cluster."

    if [[ "$node_type" == "meta" ]]; then
      influxd-ctl add-meta "$node_hostname:8091"
      echo -n "$?"
    else
      influxd-ctl add-data "$node_hostname:8088"
      echo -n "$?"
    fi

  else

    log_info "The rally point for the cluster is $rally_point_ip"

    if [[ "$node_type" == "meta" ]]; then
      influxd-ctl -bind "$rally_point_ip:8091" add-meta "$node_hostname:8091"
      echo -n "$?"
    else
      influxd-ctl -bind "$rally_point_ip:8091" add-data "$node_hostname:8088"
      echo -n "$?"
    fi

  fi

  set -e
}

function wait_for_node_to_join_cluster {
  local -r node_type="$1"
  local -r node_hostname="$2"
  local -r node_ip="$3"
  local -r rally_point_ip="$4"

  for (( i=0; i<"$MAX_RETRIES"; i++ )); do
    local exit_code
    exit_code=$(join_cluster "$node_type" "$node_hostname" "$node_ip" "$rally_point_ip")

    if [[ "$exit_code" == "1" ]]; then
      log_warn "InfluxDB meta node $rally_point_ip is not yet ready. Will sleep for $SLEEP_BETWEEN_RETRIES_SEC seconds and check again."
      sleep "$SLEEP_BETWEEN_RETRIES_SEC"
    else
      log_info "$node_hostname joined the cluster successfully."
      return
    fi
  done

  log_error "InfluxDB meta node $rally_point_hostname still not ready after $MAX_RETRIES retries."
  exit 1
}

function start_influxdb {
  local -r node_type="$1"

  set +e

  if [[ "$node_type" == "meta" ]]; then
    log_info "Starting InfluxDB Meta Service"
    sudo systemctl enable influxdb-meta.service
    sudo systemctl start influxdb-meta.service
    echo -n "$?"
  else
    log_info "Starting InfluxDB Data Service"
    sudo systemctl enable influxdb.service
    sudo systemctl start influxdb.service
    echo -n "$?"
  fi

  set -e
}

function wait_for_service_to_start {
  local -r node_type="$1"
  local -r max_retries=5
  local -r sleep_between_retries=5

  for (( i=0; i<"$max_retries"; i++ )); do
    local exit_code
    exit_code=$(start_influxdb "$node_type")

    if [[ "$exit_code" == "0" ]]; then
      log_info "Service started successfully."
      # The services need a few seconds to fully initialize
      # before we start hitting them with cluster operation requests
      sleep 5
      return
    else
      log_warn "Service couldn't start. Will sleep for $sleep_between_retries seconds and try again."
      sleep "$sleep_between_retries"
    fi
  done

  log_error "Service failed to start after $max_retries retries."
  exit 1
}

function run_influxdb {
  local node_type=""
  local meta_group_name=""
  local region=""
  local hostname=""
  local private_ip=""
  local -a auto_fill=()

  while [[ $# > 0 ]]; do
    local key="$1"
    case "$key" in
      --help)
        print_usage
        exit
        ;;
      --hostname)
        assert_not_empty "$key" "$2"
        hostname="$2"
        shift
        ;;
      --private-ip)
        assert_not_empty "$key" "$2"
        private_ip="$2"
        shift
        ;;
      --node-type)
        assert_not_empty "$key" "$2"
        node_type="$2"
        shift
        ;;
      --meta-group-name)
        assert_not_empty "$key" "$2"
        meta_group_name="$2"
        shift
        ;;
      --region)
        assert_not_empty "$key" "$2"
        region="$2"
        shift
        ;;
      --auto-fill)
        assert_not_empty "$key" "$2"
        auto_fill+=("$2")
        shift
        ;;
      *)
        echo "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--hostname" "$hostname"
  assert_not_empty "--private-ip" "$private_ip"
  assert_not_empty "--node-type" "$node_type"
  assert_value_in_list "--node-type" "$node_type" "meta" "data"
  assert_not_empty "--meta-group-name" "$meta_group_name"
  assert_not_empty "--region" "$region"

  if [[ "$node_type" == "meta" ]]; then
    file_fill_template "$DEFAULT_META_CONFIG_FILE_PATH" "${auto_fill[@]}"
  else
    file_fill_template "$DEFAULT_DATA_CONFIG_FILE_PATH" "${auto_fill[@]}"
  fi

  wait_for_service_to_start "$node_type"

  local rally_point_ip
  rally_point_ip=$(get_rally_point_ip "$meta_group_name" "$region")

  wait_for_node_to_join_cluster "$node_type" "$hostname" "$private_ip" "$rally_point_ip"
}

run_influxdb "$@"
